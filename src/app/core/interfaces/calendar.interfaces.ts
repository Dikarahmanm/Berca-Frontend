// Calendar Event Interfaces
export interface CalendarEvent {
  id: number;
  title: string;
  description?: string;
  startDate: string; // ISO date string
  endDate?: string;
  isAllDay: boolean;
  eventType: CalendarEventType;
  priority: EventPriority;
  actionUrl?: string;
  relatedEntityId?: number;
  relatedEntityType?: string;
  branchId?: number;
  branchName?: string;
  hasReminder: boolean;
  reminderMinutes?: number;
  reminderSent: boolean;
  color?: string;
  isActive: boolean;
  isAutoGenerated: boolean;
  recurrencePattern?: string;
  notes?: string;
  createdBy: number;
  createdByName?: string;
  createdAt: string;
  updatedAt: string;
  relatedEntityName?: string;
  relatedEntityDetails?: string;
}

export enum CalendarEventType {
  ProductExpiry = 0,
  FactureDue = 1,
  MemberPayment = 2,
  Inventory = 3,
  Maintenance = 4,
  Meeting = 5,
  Promotion = 6,
  SystemMaintenance = 7,
  SupplierAppointment = 8,
  Reminder = 9,
  Custom = 10
}

export enum EventPriority {
  Low = 0,
  Normal = 1,
  High = 2,
  Critical = 3
}

export interface CreateCalendarEventDto {
  title: string;
  description?: string;
  startDate: string;
  endDate?: string;
  isAllDay: boolean;
  eventType: CalendarEventType;
  priority: EventPriority;
  actionUrl?: string;
  relatedEntityId?: number;
  relatedEntityType?: string;
  branchId?: number;
  hasReminder: boolean;
  reminderMinutes?: number;
  color?: string;
  recurrencePattern?: string;
  notes?: string;
}

export interface UpdateCalendarEventDto {
  title?: string;
  description?: string;
  startDate?: string;
  endDate?: string;
  isAllDay?: boolean;
  eventType?: CalendarEventType;
  priority?: EventPriority;
  actionUrl?: string;
  relatedEntityId?: number;
  relatedEntityType?: string;
  branchId?: number;
  hasReminder?: boolean;
  reminderMinutes?: number;
  color?: string;
  isActive?: boolean;
  recurrencePattern?: string;
  notes?: string;
}

export interface CalendarEventQueryParams {
  startDate?: string;
  endDate?: string;
  eventType?: CalendarEventType;
  priority?: EventPriority;
  branchId?: number;
  includeInactive?: boolean;
  isAutoGenerated?: boolean;
  searchTerm?: string;
  page?: number;
  pageSize?: number;
}

export interface CalendarEventPagedResponse {
  events: CalendarEvent[];
  totalCount: number;
  page: number;
  pageSize: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

export interface CalendarMonthView {
  year: number;
  month: number;
  events: CalendarEvent[];
  eventCountByDay: { [key: number]: number };
  criticalEvents: CalendarEvent[];
}

export interface DailyEventsSummary {
  date: string;
  events: CalendarEvent[];
  totalEvents: number;
  criticalEvents: number;
  pendingReminders: number;
  eventsByType: { [key: string]: number };
}

export interface CalendarDashboard {
  today: string;
  todayEvents: CalendarEvent[];
  upcomingEvents: CalendarEvent[];
  overdueEvents: CalendarEvent[];
  eventTypeCount: { [key: string]: number };
  priorityCount: { [key: string]: number };
  pendingReminders: number;
  totalEventsThisMonth: number;
}

export interface CalendarEventStats {
  totalEvents: number;
  activeEvents: number;
  autoGeneratedEvents: number;
  eventsWithReminders: number;
  completedEvents: number;
  eventsByType: { [key: string]: number };
  eventsByPriority: { [key: string]: number };
  eventsByMonth: { [key: string]: number };
}

// Helper types
export interface EventTypeInfo {
  type: CalendarEventType;
  label: string;
  icon: string;
  color: string;
}

export interface EventPriorityInfo {
  priority: EventPriority;
  label: string;
  color: string;
  dotColor: string;
}
