import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable, BehaviorSubject, tap } from 'rxjs';
import {
  CalendarEvent,
  CalendarEventQueryParams,
  CalendarEventPagedResponse,
  CalendarMonthView,
  DailyEventsSummary,
  CalendarDashboard,
  CalendarEventStats,
  CreateCalendarEventDto,
  UpdateCalendarEventDto,
  CalendarEventType,
  EventPriority,
  EventTypeInfo,
  EventPriorityInfo
} from '../interfaces/calendar.interfaces';

@Injectable({
  providedIn: 'root'
})
export class CalendarService {
  private baseUrl = 'http://localhost:5171/api/Calendar';

  // State management
  private currentMonthViewSubject = new BehaviorSubject<CalendarMonthView | null>(null);
  public currentMonthView$ = this.currentMonthViewSubject.asObservable();

  private dashboardDataSubject = new BehaviorSubject<CalendarDashboard | null>(null);
  public dashboardData$ = this.dashboardDataSubject.asObservable();

  constructor(private http: HttpClient) {
    console.log('📅 CalendarService initialized');
  }

  // ==================== CALENDAR EVENT CRUD ==================== //

  /**
   * Get calendar events with filtering and pagination
   */
  getEvents(params: CalendarEventQueryParams): Observable<{ success: boolean; data: CalendarEventPagedResponse; message: string }> {
    let httpParams = new HttpParams();

    if (params.startDate) httpParams = httpParams.set('startDate', params.startDate);
    if (params.endDate) httpParams = httpParams.set('endDate', params.endDate);
    if (params.eventType !== undefined) httpParams = httpParams.set('eventType', params.eventType.toString());
    if (params.priority !== undefined) httpParams = httpParams.set('priority', params.priority.toString());
    if (params.branchId) httpParams = httpParams.set('branchId', params.branchId.toString());
    if (params.includeInactive) httpParams = httpParams.set('includeInactive', 'true');
    if (params.isAutoGenerated !== undefined) httpParams = httpParams.set('isAutoGenerated', params.isAutoGenerated.toString());
    if (params.searchTerm) httpParams = httpParams.set('searchTerm', params.searchTerm);
    if (params.page) httpParams = httpParams.set('page', params.page.toString());
    if (params.pageSize) httpParams = httpParams.set('pageSize', params.pageSize.toString());

    console.log('📅 Fetching events with params:', params);

    return this.http.get<any>(this.baseUrl, {
      params: httpParams,
      withCredentials: true
    }).pipe(
      tap(response => {
        console.log('✅ Events fetched:', response);
      })
    );
  }

  /**
   * Get calendar events for specific date range
   */
  getEventsByDateRange(startDate: string, endDate: string, branchId?: number): Observable<{ success: boolean; data: CalendarEvent[]; message: string }> {
    let params = new HttpParams()
      .set('startDate', startDate)
      .set('endDate', endDate);

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Fetching events by date range:', startDate, 'to', endDate);

    return this.http.get<any>(`${this.baseUrl}/date-range`, {
      params,
      withCredentials: true
    });
  }

  /**
   * Get single calendar event by ID
   */
  getEventById(id: number): Observable<{ success: boolean; data: CalendarEvent; message: string }> {
    console.log('📅 Fetching event by ID:', id);

    return this.http.get<any>(`${this.baseUrl}/${id}`, {
      withCredentials: true
    });
  }

  /**
   * Create new calendar event
   */
  createEvent(event: CreateCalendarEventDto): Observable<{ success: boolean; data: CalendarEvent; message: string }> {
    console.log('📅 Creating new event:', event);

    return this.http.post<any>(this.baseUrl, event, {
      withCredentials: true
    }).pipe(
      tap(response => {
        console.log('✅ Event created:', response);
        // Refresh dashboard data
        this.refreshDashboard();
      })
    );
  }

  /**
   * Update existing calendar event
   */
  updateEvent(id: number, event: UpdateCalendarEventDto): Observable<{ success: boolean; data: CalendarEvent; message: string }> {
    console.log('📅 Updating event:', id, event);

    return this.http.put<any>(`${this.baseUrl}/${id}`, event, {
      withCredentials: true
    }).pipe(
      tap(response => {
        console.log('✅ Event updated:', response);
        // Refresh dashboard data
        this.refreshDashboard();
      })
    );
  }

  /**
   * Delete calendar event
   */
  deleteEvent(id: number): Observable<{ success: boolean; message: string }> {
    console.log('📅 Deleting event:', id);

    return this.http.delete<any>(`${this.baseUrl}/${id}`, {
      withCredentials: true
    }).pipe(
      tap(response => {
        console.log('✅ Event deleted:', response);
        // Refresh dashboard data
        this.refreshDashboard();
      })
    );
  }

  // ==================== CALENDAR VIEWS ==================== //

  /**
   * Get calendar month view with events
   */
  getMonthView(year: number, month: number, branchId?: number): Observable<{ success: boolean; data: CalendarMonthView; message: string }> {
    let params = new HttpParams();

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Fetching month view:', year, month);

    return this.http.get<any>(`${this.baseUrl}/month-view/${year}/${month}`, {
      params,
      withCredentials: true
    }).pipe(
      tap(response => {
        console.log('✅ Month view fetched:', response);
        this.currentMonthViewSubject.next(response.data);
      })
    );
  }

  /**
   * Get daily events summary
   */
  getDailySummary(date: string, branchId?: number): Observable<{ success: boolean; data: DailyEventsSummary; message: string }> {
    let params = new HttpParams().set('date', date);

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Fetching daily summary for:', date);

    return this.http.get<any>(`${this.baseUrl}/daily-summary`, {
      params,
      withCredentials: true
    });
  }

  /**
   * Get calendar dashboard data
   */
  getDashboard(branchId?: number): Observable<{ success: boolean; data: CalendarDashboard; message: string }> {
    let params = new HttpParams();

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Fetching dashboard data');

    return this.http.get<any>(`${this.baseUrl}/dashboard`, {
      params,
      withCredentials: true
    }).pipe(
      tap(response => {
        console.log('✅ Dashboard data fetched:', response);
        this.dashboardDataSubject.next(response.data);
      })
    );
  }

  /**
   * Refresh dashboard data
   */
  refreshDashboard(branchId?: number): void {
    this.getDashboard(branchId).subscribe({
      next: () => console.log('✅ Dashboard refreshed'),
      error: (err) => console.error('❌ Dashboard refresh failed:', err)
    });
  }

  // ==================== ANALYTICS ==================== //

  /**
   * Get upcoming events for user
   */
  getUpcomingEvents(days: number = 7, branchId?: number): Observable<{ success: boolean; data: CalendarEvent[]; message: string }> {
    let params = new HttpParams().set('days', days.toString());

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Fetching upcoming events for', days, 'days');

    return this.http.get<any>(`${this.baseUrl}/upcoming`, {
      params,
      withCredentials: true
    });
  }

  /**
   * Get events requiring attention
   */
  getEventsRequiringAttention(branchId?: number): Observable<{ success: boolean; data: CalendarEvent[]; message: string }> {
    let params = new HttpParams();

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Fetching events requiring attention');

    return this.http.get<any>(`${this.baseUrl}/attention`, {
      params,
      withCredentials: true
    });
  }

  /**
   * Search events by text
   */
  searchEvents(searchTerm: string, branchId?: number, maxResults: number = 20): Observable<{ success: boolean; data: CalendarEvent[]; message: string }> {
    let params = new HttpParams()
      .set('searchTerm', searchTerm)
      .set('maxResults', maxResults.toString());

    if (branchId) {
      params = params.set('branchId', branchId.toString());
    }

    console.log('📅 Searching events with term:', searchTerm);

    return this.http.get<any>(`${this.baseUrl}/search`, {
      params,
      withCredentials: true
    });
  }

  /**
   * Get calendar event statistics
   */
  getEventStatistics(branchId?: number, fromDate?: string, toDate?: string): Observable<{ success: boolean; data: CalendarEventStats; message: string }> {
    let params = new HttpParams();

    if (branchId) params = params.set('branchId', branchId.toString());
    if (fromDate) params = params.set('fromDate', fromDate);
    if (toDate) params = params.set('toDate', toDate);

    console.log('📅 Fetching event statistics');

    return this.http.get<any>(`${this.baseUrl}/statistics`, {
      params,
      withCredentials: true
    });
  }

  // ==================== HELPER METHODS ==================== //

  /**
   * Get event type information
   */
  getEventTypeInfo(type: CalendarEventType): EventTypeInfo {
    const eventTypes: { [key: number]: EventTypeInfo } = {
      [CalendarEventType.ProductExpiry]: { type, label: 'Product Expiry', icon: '📦', color: '#ef4444' },
      [CalendarEventType.FactureDue]: { type, label: 'Facture Due', icon: '💰', color: '#f59e0b' },
      [CalendarEventType.MemberPayment]: { type, label: 'Member Payment', icon: '💳', color: '#8b5cf6' },
      [CalendarEventType.Inventory]: { type, label: 'Inventory', icon: '📊', color: '#06b6d4' },
      [CalendarEventType.Maintenance]: { type, label: 'Maintenance', icon: '🔧', color: '#64748b' },
      [CalendarEventType.Meeting]: { type, label: 'Meeting', icon: '👥', color: '#3b82f6' },
      [CalendarEventType.Promotion]: { type, label: 'Promotion', icon: '🎉', color: '#ec4899' },
      [CalendarEventType.SystemMaintenance]: { type, label: 'System Maintenance', icon: '⚙️', color: '#78716c' },
      [CalendarEventType.SupplierAppointment]: { type, label: 'Supplier Appointment', icon: '🚚', color: '#84cc16' },
      [CalendarEventType.Reminder]: { type, label: 'Reminder', icon: '🔔', color: '#a855f7' },
      [CalendarEventType.Custom]: { type, label: 'Custom', icon: '✨', color: '#6366f1' }
    };

    return eventTypes[type] || { type, label: 'Unknown', icon: '❓', color: '#9ca3af' };
  }

  /**
   * Get event priority information
   */
  getEventPriorityInfo(priority: EventPriority): EventPriorityInfo {
    const priorities: { [key: number]: EventPriorityInfo } = {
      [EventPriority.Low]: { priority, label: 'Low', color: '#9ca3af', dotColor: '#d1d5db' },
      [EventPriority.Normal]: { priority, label: 'Normal', color: '#10b981', dotColor: '#10b981' },
      [EventPriority.High]: { priority, label: 'High', color: '#f59e0b', dotColor: '#f59e0b' },
      [EventPriority.Critical]: { priority, label: 'Critical', color: '#ef4444', dotColor: '#ef4444' }
    };

    return priorities[priority] || { priority, label: 'Unknown', color: '#9ca3af', dotColor: '#9ca3af' };
  }

  /**
   * Format date to ISO string
   */
  formatDateToISO(date: Date): string {
    return date.toISOString();
  }

  /**
   * Parse ISO date string to Date
   */
  parseISODate(dateString: string): Date {
    return new Date(dateString);
  }

  /**
   * Check if event is today
   */
  isEventToday(event: CalendarEvent): boolean {
    const eventDate = new Date(event.startDate);
    const today = new Date();
    return eventDate.toDateString() === today.toDateString();
  }

  /**
   * Check if event is upcoming (within next 7 days)
   */
  isEventUpcoming(event: CalendarEvent): boolean {
    const eventDate = new Date(event.startDate);
    const today = new Date();
    const nextWeek = new Date(today);
    nextWeek.setDate(today.getDate() + 7);

    return eventDate > today && eventDate <= nextWeek;
  }

  /**
   * Check if event is past
   */
  isEventPast(event: CalendarEvent): boolean {
    const eventDate = new Date(event.startDate);
    const today = new Date();
    return eventDate < today;
  }

  /**
   * Get Indonesian month name
   */
  getIndonesianMonthName(month: number): string {
    const months = [
      'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni',
      'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
    ];
    return months[month - 1] || 'Unknown';
  }

  /**
   * Get Indonesian day name
   */
  getIndonesianDayName(dayIndex: number): string {
    const days = ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'];
    return days[dayIndex] || 'Unknown';
  }
}
